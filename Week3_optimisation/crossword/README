AI technique used:
Optimization problems: constraint satisfaction

Background from website:
How might you go about generating a crossword puzzle? Given the structure of a crossword puzzle (i.e., 
which squares of the grid are meant to be filled in with a letter), and a list of words to use, the 
problem becomes one of choosing which words should go in each vertical or horizontal sequence of squares. 
We can model this sort of problem as a constraint satisfaction problem. Each sequence of squares is one 
variable, for which we need to decide on its value (which word in the domain of possible words will fill 
in that sequence).

Work done:
In generate.py I implemented the functions: enforce_node_consistency, revise, ac3, assignment_complete, 
consistent, order_domain_values, selected_unassigned_variable, and backtrack.
In pagerank.py I implemented the functions transition_model, sample_pagerank, and iterate_pagerank.

Run via:
python3 generate.py data/structure0.txt data/words0.txt
