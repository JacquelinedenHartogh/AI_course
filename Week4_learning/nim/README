AI technique used:
Reinforcement learning

Background from website:
Recall that in the game Nim, we begin with some number of piles, each with some number of objects. 
Players take turns: on a player’s turn, the player removes any non-negative number of objects from 
any one non-empty pile. Whoever removes the last object loses.
There’s some simple strategy you might imagine for this game: if there’s only one pile and three 
objects left in it, and it’s your turn, your best bet is to remove two of those objects, leaving 
your opponent with the third and final object to remove. But if there are more piles, the strategy 
gets considerably more complicated. In this problem, we’ll build an AI to learn the strategy for 
this game through reinforcement learning. By playing against itself repeatedly and learning from 
experience, eventually our AI will learn which actions to take and which actions to avoid.
In particular, we’ll use Q-learning for this project.  

Work done:
In nim.py I implemented the functions: get_q_value, update_q_value, best_future_reward, and choose_action.

Run via:
python3 play.py
